{"ast":null,"code":"const regexFloat = /^\\d*\\.?\\d*$/;\nconst regexInt = /^[0-9]*$/;\nconst checkFloat = (value, type) => {\n  if (!regexFloat.test(value)) {\n    return `${type} must be a number`;\n  } else return '';\n};\nconst checkInt = (value, type) => {\n  if (!regexInt.test(value)) {\n    return `${type} must be a number`;\n  } else return '';\n};\nconst validators = {\n  name: (value, breeds) => {\n    if (value.length < 3 || value.length > 50) {\n      return 'Name must have 3 to 50 characters';\n    } else if (!/^[a-zA-Z '.-]*$/.test(value)) {\n      return 'Name must contain only characters';\n    } else if (breeds.find(b => b.name.toLowerCase() === value.toLowerCase())) {\n      return 'Name already exists';\n    } else {\n      return '';\n    }\n  },\n  height: value => {\n    if (value.length < 1) return 'Please provide the Height';\n    if (value < 10 || value > 150) return 'Height must be between 10 and 150';\n    return checkFloat(value, 'Height');\n  },\n  weight: value => {\n    if (value.length < 1) return 'Please provide the Weight';\n    if (value < 1 || value > 120) return 'Weight must be between 1 and 120';\n    return checkFloat(value, 'Weight');\n  },\n  life: value => {\n    if (value < 1 || value > 30) return 'Life Span must be between 1 and 30';\n    return checkInt(value, 'Life');\n  },\n  minMax: (min, max, type) => {\n    if (min >= max) {\n      return `Maximum ${type} must be larger than minimum ${type}`;\n    } else return '';\n  }\n};\nexport default validators;","map":{"version":3,"names":["regexFloat","regexInt","checkFloat","value","type","test","checkInt","validators","name","breeds","length","find","b","toLowerCase","height","weight","life","minMax","min","max"],"sources":["C:/Users/carla/OneDrive/Desktop/PI/client/src/components/Create/formValidators.js"],"sourcesContent":["const regexFloat = /^\\d*\\.?\\d*$/;\r\nconst regexInt = /^[0-9]*$/;\r\n\r\nconst checkFloat = (value, type) => {\r\n  if(!(regexFloat.test(value))) {\r\n    return `${type} must be a number`\r\n  }\r\n  else return '';\r\n}\r\n\r\nconst checkInt = (value, type) => {\r\n  if(!(regexInt.test(value))) {\r\n    return `${type} must be a number`\r\n  }\r\n  else return '';\r\n}\r\n\r\nconst validators = {\r\n\r\n  name: (value, breeds) => {\r\n    if(value.length < 3 || value.length > 50) {\r\n      return 'Name must have 3 to 50 characters';\r\n    }\r\n    else if(!(/^[a-zA-Z '.-]*$/.test(value))) {\r\n      return 'Name must contain only characters';\r\n    }\r\n    else if(breeds.find(b => b.name.toLowerCase() === value.toLowerCase())) {\r\n      return 'Name already exists'\r\n    }\r\n    else {\r\n      return '';\r\n    }\r\n  },\r\n\r\n  height: (value) => {\r\n    if(value.length < 1) return 'Please provide the Height';\r\n    if(value < 10 || value > 150) return 'Height must be between 10 and 150';\r\n    return checkFloat(value, 'Height');\r\n  },\r\n\r\n  weight: (value) => {\r\n    if(value.length < 1) return 'Please provide the Weight';\r\n    if(value < 1 || value > 120) return 'Weight must be between 1 and 120';\r\n    return checkFloat(value, 'Weight');\r\n  },\r\n\r\n  life: (value) => {\r\n    if(value < 1 || value > 30) return 'Life Span must be between 1 and 30';\r\n    return checkInt(value, 'Life');\r\n  },\r\n\r\n  minMax: (min, max, type) => {\r\n    if(min >= max) {\r\n      return `Maximum ${type} must be larger than minimum ${type}`;\r\n    }\r\n    else\r\n      return '';\r\n  }\r\n\r\n}\r\n\r\nexport default validators;"],"mappings":"AAAA,MAAMA,UAAU,GAAG,aAAa;AAChC,MAAMC,QAAQ,GAAG,UAAU;AAE3B,MAAMC,UAAU,GAAG,CAACC,KAAK,EAAEC,IAAI,KAAK;EAClC,IAAG,CAAEJ,UAAU,CAACK,IAAI,CAACF,KAAK,CAAE,EAAE;IAC5B,OAAQ,GAAEC,IAAK,mBAAkB;EACnC,CAAC,MACI,OAAO,EAAE;AAChB,CAAC;AAED,MAAME,QAAQ,GAAG,CAACH,KAAK,EAAEC,IAAI,KAAK;EAChC,IAAG,CAAEH,QAAQ,CAACI,IAAI,CAACF,KAAK,CAAE,EAAE;IAC1B,OAAQ,GAAEC,IAAK,mBAAkB;EACnC,CAAC,MACI,OAAO,EAAE;AAChB,CAAC;AAED,MAAMG,UAAU,GAAG;EAEjBC,IAAI,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;IACvB,IAAGN,KAAK,CAACO,MAAM,GAAG,CAAC,IAAIP,KAAK,CAACO,MAAM,GAAG,EAAE,EAAE;MACxC,OAAO,mCAAmC;IAC5C,CAAC,MACI,IAAG,CAAE,iBAAiB,CAACL,IAAI,CAACF,KAAK,CAAE,EAAE;MACxC,OAAO,mCAAmC;IAC5C,CAAC,MACI,IAAGM,MAAM,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,IAAI,CAACK,WAAW,EAAE,KAAKV,KAAK,CAACU,WAAW,EAAE,CAAC,EAAE;MACtE,OAAO,qBAAqB;IAC9B,CAAC,MACI;MACH,OAAO,EAAE;IACX;EACF,CAAC;EAEDC,MAAM,EAAGX,KAAK,IAAK;IACjB,IAAGA,KAAK,CAACO,MAAM,GAAG,CAAC,EAAE,OAAO,2BAA2B;IACvD,IAAGP,KAAK,GAAG,EAAE,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,mCAAmC;IACxE,OAAOD,UAAU,CAACC,KAAK,EAAE,QAAQ,CAAC;EACpC,CAAC;EAEDY,MAAM,EAAGZ,KAAK,IAAK;IACjB,IAAGA,KAAK,CAACO,MAAM,GAAG,CAAC,EAAE,OAAO,2BAA2B;IACvD,IAAGP,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,GAAG,EAAE,OAAO,kCAAkC;IACtE,OAAOD,UAAU,CAACC,KAAK,EAAE,QAAQ,CAAC;EACpC,CAAC;EAEDa,IAAI,EAAGb,KAAK,IAAK;IACf,IAAGA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE,OAAO,oCAAoC;IACvE,OAAOG,QAAQ,CAACH,KAAK,EAAE,MAAM,CAAC;EAChC,CAAC;EAEDc,MAAM,EAAE,CAACC,GAAG,EAAEC,GAAG,EAAEf,IAAI,KAAK;IAC1B,IAAGc,GAAG,IAAIC,GAAG,EAAE;MACb,OAAQ,WAAUf,IAAK,gCAA+BA,IAAK,EAAC;IAC9D,CAAC,MAEC,OAAO,EAAE;EACb;AAEF,CAAC;AAED,eAAeG,UAAU"},"metadata":{},"sourceType":"module"}