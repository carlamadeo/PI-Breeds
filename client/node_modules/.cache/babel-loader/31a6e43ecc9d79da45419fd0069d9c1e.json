{"ast":null,"code":"export const GET_BREEDS = 'GET_BREEDS';\nexport const SET_DISPLAY_BREEDS = 'SET_DISPLAY_BREEDS';\nexport const GET_BREEDS_BY_NAME = 'GET_BREEDS_BY_NAME';\nexport const GET_BREEDS_BY_NAME_RESPONSE = 'GET_BREEDS_BY_NAME_RESPONSE';\nexport const GET_BREED_DETAIL = 'GET_BREED_DETAIL';\nexport const GET_BREED_DETAIL_RESPONSE = 'GET_BREED_DETAIL_RESPONSE';\nexport const CREATE_BREED = 'CREATE_BREED';\nexport const GET_TEMPERAMENTS = 'GET_TEMPERAMENTS';\nexport const TOGGLE_LOADING = 'TOGGLE_LOADING';\nexport const CREATE_RESPONSE = 'CREATE_RESPONSE';\nexport const GET_RESPONSE = 'GET_RESPONSE';\nconst URL = 'http://localhost:3001';\n\n//TODO: VER TODOS LOS CATCHS ERRORS!!\n\nconst getBreeds = () => {\n  return async dispatch => {\n    dispatch({\n      type: TOGGLE_LOADING,\n      payload: true\n    });\n    try {\n      const response = await fetch(`${URL}/dogs/`);\n      const payload = await response.json();\n      if (response.ok) {\n        dispatch({\n          type: GET_BREEDS,\n          payload\n        });\n        dispatch({\n          type: SET_DISPLAY_BREEDS,\n          payload\n        });\n        dispatch({\n          type: TOGGLE_LOADING,\n          payload: false\n        });\n      } else {\n        throw payload;\n      }\n    } catch (error) {\n      dispatch({\n        type: GET_RESPONSE,\n        payload: error\n      });\n      dispatch({\n        type: TOGGLE_LOADING,\n        payload: false\n      });\n    }\n  };\n};\nconst setDisplayBreeds = payload => {\n  return dispatch => {\n    dispatch({\n      type: TOGGLE_LOADING,\n      payload: true\n    });\n    dispatch({\n      type: SET_DISPLAY_BREEDS,\n      payload\n    });\n    dispatch({\n      type: TOGGLE_LOADING,\n      payload: false\n    });\n  };\n};\nconst getBreedsByName = name => {\n  return async dispatch => {\n    dispatch({\n      type: TOGGLE_LOADING,\n      payload: true\n    });\n    try {\n      const response = await fetch(`${URL}/dogs?name=${name}`);\n      const payload = await response.json();\n      if (response.ok) {\n        dispatch({\n          type: GET_BREEDS_BY_NAME,\n          payload\n        });\n        dispatch({\n          type: TOGGLE_LOADING,\n          payload: false\n        });\n      } else {\n        throw payload;\n      }\n    } catch (error) {\n      dispatch({\n        type: TOGGLE_LOADING,\n        payload: false\n      });\n      dispatch(setByNameResponse(error));\n    }\n  };\n};\nconst setByNameResponse = payload => {\n  return async dispatch => {\n    dispatch({\n      type: GET_BREEDS_BY_NAME_RESPONSE,\n      payload\n    });\n  };\n};\nconst getBreedDetail = id => {\n  return async dispatch => {\n    dispatch({\n      type: TOGGLE_LOADING,\n      payload: true\n    });\n    try {\n      const response = await fetch(`${URL}/dogs/${id}`);\n      const payload = await response.json();\n      if (response.ok) {\n        dispatch({\n          type: GET_BREED_DETAIL,\n          payload\n        });\n        dispatch({\n          type: TOGGLE_LOADING,\n          payload: false\n        });\n      } else {\n        throw payload;\n      }\n    } catch (error) {\n      dispatch({\n        type: TOGGLE_LOADING,\n        payload: false\n      });\n      dispatch(setByIdResponse(error));\n    }\n  };\n};\nconst setByIdResponse = payload => {\n  return async dispatch => {\n    dispatch({\n      type: GET_BREED_DETAIL_RESPONSE,\n      payload\n    });\n  };\n};\nconst createBreed = breed => {\n  //const breedDB = {...breed, temperaments: breed.id};\n  //const breedApp = {...breed, temperaments: breed.};\n\n  return async dispatch => {\n    dispatch({\n      type: TOGGLE_LOADING,\n      payload: true\n    });\n    try {\n      const response = await fetch(`${URL}/dogs/`, {\n        method: 'POST',\n        body: JSON.stringify(breed),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const payload = await response.json();\n      if (payload.type === 'Error') throw payload;\n      dispatch(setCreateResponse(payload));\n      //dispatch({ type: CREATE_BREED, payload: breed });\n      dispatch({\n        type: TOGGLE_LOADING,\n        payload: false\n      });\n    } catch (error) {\n      dispatch({\n        type: TOGGLE_LOADING,\n        payload: false\n      });\n      dispatch(setCreateResponse(error));\n    }\n  };\n};\nconst setCreateResponse = payload => {\n  return async dispatch => {\n    dispatch({\n      type: CREATE_RESPONSE,\n      payload\n    });\n  };\n};\nconst deleteBreed = async id => {\n  try {\n    const response = await fetch(`${URL}/dogs/${id}`, {\n      method: 'DELETE'\n    });\n    const data = await res.json();\n  } catch (error) {}\n};\nconst setDeleteResponse = payload => {\n  return async dispatch => {\n    dispatch({\n      type: CREATE_RESPONSE,\n      payload\n    });\n  };\n};\nconst getTemperaments = () => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`${URL}/temperaments`);\n      const payload = await response.json();\n      dispatch({\n        type: GET_TEMPERAMENTS,\n        payload\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n};\nexport { getBreeds, setDisplayBreeds, getBreedsByName, setByNameResponse, getBreedDetail, createBreed, setCreateResponse, setDeleteResponse, getTemperaments };","map":{"version":3,"names":["GET_BREEDS","SET_DISPLAY_BREEDS","GET_BREEDS_BY_NAME","GET_BREEDS_BY_NAME_RESPONSE","GET_BREED_DETAIL","GET_BREED_DETAIL_RESPONSE","CREATE_BREED","GET_TEMPERAMENTS","TOGGLE_LOADING","CREATE_RESPONSE","GET_RESPONSE","URL","getBreeds","dispatch","type","payload","response","fetch","json","ok","error","setDisplayBreeds","getBreedsByName","name","setByNameResponse","getBreedDetail","id","setByIdResponse","createBreed","breed","method","body","JSON","stringify","headers","setCreateResponse","deleteBreed","data","res","setDeleteResponse","getTemperaments","console","warn"],"sources":["C:/Users/carla/OneDrive/Desktop/PI/client/src/redux/actions/index.js"],"sourcesContent":["export const GET_BREEDS = 'GET_BREEDS';\r\nexport const SET_DISPLAY_BREEDS = 'SET_DISPLAY_BREEDS';\r\nexport const GET_BREEDS_BY_NAME = 'GET_BREEDS_BY_NAME';\r\nexport const GET_BREEDS_BY_NAME_RESPONSE = 'GET_BREEDS_BY_NAME_RESPONSE';\r\nexport const GET_BREED_DETAIL = 'GET_BREED_DETAIL';\r\nexport const GET_BREED_DETAIL_RESPONSE = 'GET_BREED_DETAIL_RESPONSE';\r\nexport const CREATE_BREED = 'CREATE_BREED';\r\nexport const GET_TEMPERAMENTS = 'GET_TEMPERAMENTS';\r\nexport const TOGGLE_LOADING = 'TOGGLE_LOADING';\r\nexport const CREATE_RESPONSE = 'CREATE_RESPONSE';\r\nexport const GET_RESPONSE = 'GET_RESPONSE';\r\nconst URL = 'http://localhost:3001';\r\n\r\n//TODO: VER TODOS LOS CATCHS ERRORS!!\r\n\r\nconst getBreeds = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: TOGGLE_LOADING, payload: true });\r\n    try {\r\n      const response = await fetch(`${URL}/dogs/`);\r\n      const payload = await (response.json());\r\n      if(response.ok) {\r\n        dispatch({ type: GET_BREEDS, payload });\r\n        dispatch({ type: SET_DISPLAY_BREEDS, payload });\r\n        dispatch({ type: TOGGLE_LOADING, payload: false });\r\n      }\r\n      else {\r\n        throw (payload);\r\n      }\r\n    }\r\n    catch(error) {\r\n      dispatch({ type: GET_RESPONSE, payload: error });\r\n      dispatch({ type: TOGGLE_LOADING, payload: false });\r\n    }\r\n  }\r\n}\r\n\r\nconst setDisplayBreeds = (payload) => {\r\n  return (dispatch) => {\r\n    dispatch({ type: TOGGLE_LOADING, payload: true });\r\n    dispatch({ type: SET_DISPLAY_BREEDS, payload });\r\n    dispatch({ type: TOGGLE_LOADING, payload: false });\r\n  }\r\n}\r\n\r\nconst getBreedsByName = (name) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: TOGGLE_LOADING, payload: true });\r\n    try {\r\n      const response = await fetch(`${URL}/dogs?name=${name}`);\r\n      const payload = await (response.json());\r\n      if(response.ok) {\r\n        dispatch({ type: GET_BREEDS_BY_NAME, payload });\r\n        dispatch({ type: TOGGLE_LOADING, payload: false });\r\n      }\r\n      else {\r\n        throw (payload);\r\n      }\r\n    }\r\n    catch(error) {\r\n      dispatch({ type: TOGGLE_LOADING, payload: false });\r\n      dispatch(setByNameResponse(error));\r\n    }\r\n  }\r\n}\r\n\r\nconst setByNameResponse = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: GET_BREEDS_BY_NAME_RESPONSE, payload });\r\n  }\r\n}\r\n\r\nconst getBreedDetail = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: TOGGLE_LOADING, payload: true });\r\n    try {\r\n      const response = await fetch(`${URL}/dogs/${id}`);\r\n      const payload = await (response.json());\r\n      if(response.ok) {\r\n        dispatch({ type: GET_BREED_DETAIL, payload });\r\n        dispatch({ type: TOGGLE_LOADING, payload: false });\r\n      }\r\n      else {\r\n        throw (payload);\r\n      }\r\n    }\r\n    catch(error) {\r\n      dispatch({ type: TOGGLE_LOADING, payload: false });\r\n      dispatch(setByIdResponse(error));\r\n    }\r\n  }\r\n}\r\n\r\nconst setByIdResponse = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: GET_BREED_DETAIL_RESPONSE, payload });\r\n  }\r\n}\r\n\r\nconst createBreed = (breed) => {\r\n\r\n  //const breedDB = {...breed, temperaments: breed.id};\r\n  //const breedApp = {...breed, temperaments: breed.};\r\n\r\n  return async (dispatch) => {\r\n    dispatch({ type: TOGGLE_LOADING, payload: true });\r\n    try {\r\n      const response = await fetch(`${URL}/dogs/`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(breed),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n      const payload = await (response.json());\r\n      if(payload.type === 'Error') throw (payload);\r\n      dispatch(setCreateResponse(payload));\r\n      //dispatch({ type: CREATE_BREED, payload: breed });\r\n      dispatch({ type: TOGGLE_LOADING, payload: false });\r\n    }\r\n    catch(error) {\r\n      dispatch({ type: TOGGLE_LOADING, payload: false });\r\n      dispatch(setCreateResponse(error));\r\n    }\r\n  }\r\n}\r\n\r\nconst setCreateResponse = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: CREATE_RESPONSE, payload });\r\n  }\r\n}\r\n\r\nconst deleteBreed = async (id) => {\r\n  try {\r\n    const response = await fetch(`${URL}/dogs/${id}`, {\r\n      method: 'DELETE'\r\n    });\r\n\r\n    const data = await res.json();\r\n  } catch(error) {\r\n\r\n  }\r\n}\r\n\r\nconst setDeleteResponse = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: CREATE_RESPONSE, payload });\r\n  }\r\n}\r\n\r\nconst getTemperaments = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await fetch(`${URL}/temperaments`);\r\n      const payload = await (response.json());\r\n      dispatch({ type: GET_TEMPERAMENTS, payload });\r\n    }\r\n    catch(error) {\r\n      console.warn(error);\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  getBreeds,\r\n  setDisplayBreeds,\r\n  getBreedsByName,\r\n  setByNameResponse,\r\n  getBreedDetail,\r\n  createBreed,\r\n  setCreateResponse,\r\n  setDeleteResponse,\r\n  getTemperaments\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}